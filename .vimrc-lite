" David Kramer's Lightweight .vimrc file
" Last Modified: 06/19/2017
"----------------------------------------
" vimrc that doesn't rely on any third party plugins but still
" has all the useful mappings

set nocompatible		" be iMproved, required

"Editor Tweaks

" Make backspace work normally
set backspace=indent,eol,start

" Show line numbers
set number

" Show relative line numbers
set rnu

" Smart auto-indenting inside numbered lists
set formatoptions+=n

" Remove comment leader when joining comments
set formatoptions+=j

" Syntax highlighting
syntax on

" Hide mouse cursor while typing
set mousehide

" Display current mode
set showmode

" Highlight current line
set cursorline

" Make searching better
set gdefault
set ignorecase
set smartcase

" Find as you search
set incsearch

" Highlight search matches
set hlsearch

" Show the ruler
set ruler

" Show partial commands in status line
set showcmd

" Show the status bar
set laststatus=2

" Lines to scroll when cursor leaves screen
set scrolljump=5

" Increase memory limit of registers
set viminfo='20,<1000

" Minimum lines to keep above and below cursor
set scrolloff=5

" Show matching brackets/parenthesis
set showmatch

" Indent at same position as the previous line
set autoindent

" Show hidden whitespace chars
set listchars=tab:>-,eol:¬,trail:␠
set list

" Use indents instead of 4 spaces
set shiftwidth=4

" Indentation every 4 columns
set tabstop=4

" Use tabs NOT spaces
set noexpandtab

" Encoding
set encoding=utf8

" Stronger encryption
setlocal cm=blowfish2

" Automatically update file if modified by external program
set autoread

" Rendering
set ttyfast

" Don't redraw during macro playback
set lazyredraw

" Visual autocomplete for command menu
set wildmenu


" Custom Keymappings

let mapleader = "\<Space>"

" Easier escape
inoremap kj <Esc>
cnoremap kj <Esc>

" Yank to end of line
nnoremap Y y$

" Create and move between tabs more easily
nnoremap tt <Esc>:tabnew<CR>
nnoremap tm <Esc>:tabmove<CR>
nnoremap t$ <Esc>:tablast<CR>
nnoremap t0 <Esc>:tabfirst<CR>

" Disable search match highlights
map nh <Esc>:nohl<CR>

" Move between windows more easily
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Easier access to command mode
map <leader> :

"<Leader><Leader> -- Open last buffer
nnoremap <leader><leader> <C-^>

" Toggle spellchecking
nnoremap <leader>ss :setlocal spell!<CR>

nnoremap <leader>q :quit<CR>
nnoremap <leader>qq :quit!<CR>
nnoremap <leader>qa :qa<CR>

" Show the path of the current file
nnoremap <leader>p :echo expand('%')<CR>

" Toggle between showing whitespace chars
nnoremap <leader>l :set list!<CR>

" Hotkey to insert current date into the buffer
nnoremap <F5> "=strftime("%m/%d/%y")<CR>P"
" inoremap <F5> "=strftime("%m/%d/%y")<CR>" // this is broken

" Hotkey to fix indentation
nnoremap <F7> gg=G

" Hotkey to directly editor .vimrc in a new tab
inoremap <F12> <Esc>:tabnew $MYVIMRC<CR>
nnoremap <F12> <Esc>:tabnew $MYVIMRC<CR>

" Quickly source .vimrc
nnoremap <leader>rv :source $MYVIMRC<CR>

" Always use visual block mode
nnoremap v <C-V>
nnoremap <C-V> v

vnoremap v <C-V>
vnoremap <C-V> v

set clipboard^=unnamedplus


" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" Always use visual block mode
nnoremap v <C-V>
nnoremap <C-V> v

vnoremap v <C-V>
vnoremap <C-V> v

" Source the current file
nnoremap <leader>5 <Esc>:call SourceFile()<CR>

function! SourceFile()
	:w!
	:source %
endfunction

"Double-delete to remove trailing whitespace...
nmap <silent> <BS><BS> :call TrimTrailingWS()<CR>

function! TrimTrailingWS()
	if search('\s\+$', 'cnw')
		:%s/\s\+$//g
	endif
	echo "Trim trailing backspace"
endfunction

function! CharAtCursor()
	let char = matchstr(getline('.'), '\%' . col('.') .'c.')
	" echo char
	return char
endfunction






"////////////////////////////////////////////////////////////////////////////////
"////////////////////////////////////////////////////////////////////////////////
"////////////////////////////////////////////////////////////////////////////////
"
"                    E X P E R I M E N T A L  Z O N E
"
"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

"Function to paste inside of characters, instead of appending
"to a new line
function! SmartPaste()
	"The char at the current cursor position
	let currentChar = CharAtCursor()

	let closePairs = [')', ']', '}']
	let openPairs  = ['(', '[', '{']

	if (index(closePairs, currentChar) >= 0)
		" Go to matching open pair
		normal %
	endif

	if (index(openPairs, currentChar) >= 0)
		" We are already at the start
		" Go inside and paste
		normal %"kDpkJx$"kp
	else
		" Just paste normally
		normal p
	endif
endfunction

function! YankChar()
	let yankedChar = CharAtCursor()
	let @c = yankedChar
	" Delete what was there
	normal x$"cp
endfunction

nmap <F10> :call SmartPaste() <CR>


function! GoToTab(index)
	tabfirst
	execute "normal" . a:index . "gt"
endfunction

nnoremap g1 <Esc>: call GoToTab(1)<CR>
nnoremap g2 <Esc>: call GoToTab(2)<CR>
nnoremap g3 <Esc>: call GoToTab(3)<CR>
nnoremap g4 <Esc>: call GoToTab(4)<CR>
nnoremap g5 <Esc>: call GoToTab(5)<CR>
nnoremap g6 <Esc>: call GoToTab(6)<CR>
nnoremap g7 <Esc>: call GoToTab(7)<CR>
nnoremap g8 <Esc>: call GoToTab(8)<CR>
nnoremap g9 <Esc>: call GoToTab(9)<CR>

function! TitleCaseLine()
	normal 0
	while (col(".") >= col("$") - 1)
		normal vUw
	endwhile
	echo "TitleCasedLine!"
endfunction

nmap tc <Esc>:call TitleCaseLine()<CR>
